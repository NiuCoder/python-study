# -*- encoding:utf-8 -*-
# 进程vs线程
# 要实现多任务，我们通常会设计Master-Worker模式，Master负责分配任务，Worker负责执行任务
# 多任务环境下，通常是一个Master,多个Worker
# 若果是多进程实现Master-Worker，主进程就是Master，其他进程就是Worker
# 若果是多线程实现Master-Worker，主线程就是Master，其他线程就是Worker
# 多进程的优点是一个子进程挂了，不会影响主进程和其他子进程，缺点是代价比较大，几千个进程可能导致操作系统调度问题
# 多线程通常比多进程快一点点，但是缺点是任何一个线程挂了可能导致整个进程崩溃，因为所有线程共享进程的内存

# 多任务分为计算密集型和IO密集型
# 计算密集型主要消耗CPU资源，代码执行效率至关重要，适合用C编写，不适合用脚本语言如Python编写。
# IO密集型大部分时间花在IO上，而不是CPU，所以用开发效率高的（代码量最少）的语言最合适，即Python式的脚本语言

# 用异步IO（事件驱动）模型实现多任务是一个主要的趋势，如Nginx
# 在Python中，单进程的异步编程模型称为协程。

# Python的multiprocessing模块不但支持多进程，其中managers子模块还支持把多进程分布到多台机器上。
# 一个服务进程可以做为调度者，将任务分布到其他多个进程中，依靠网络通信。
# Example for 把一个通过Queue通信的多进程程序在同一台机器上运行，现在，由于处理任务的进程任务繁重
# 希望把发送任务的进程和处理任务的进程分布到两台机器上
